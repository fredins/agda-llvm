+ p1: preciseness := precision ?
+ p2: "instead of the stack" := "instead of on the stack" 
+ p2: "Figure[linebreak]1" - avoid linebreak between Fig and number
  (and similarly with sections).
+ p2: "All syn... are not valid" := "Not all syn... are valid"
+ p2: I fell the paragraph "The syntax ... language" needs some
  rewriting: the comments about "no indirect function calls" and
  "first-order language" come a bit too indirectly now. I think it
  would be better to start with explaining the language (with Fig. 1 as a
  parenthetic remark).
+ Fig. 1: "def" has too much spacing before f.
+ §2.1: "The current implementation of GRIN only compiles a subset of
  Agda which is lambda lifted, first order, and monomorphic.":
  reformulate. I guess your it is rather your _compiler to GRIN_ that
  only supports a subset of Agda. (Perhaps the interpreter of GRIN and
  the compiler from GRIN are limited as well, but that is a separate
  "story".)
+ The |downFrom| example starts too suddenly.
+ "the treeless syntax" is used before it is explained
+ In ”store val ; λ x → foo x” I think you should explain that the
  "foo" is not really the same "foo" as before, but rather the
  translation called recursively on foo. It has another "type"
  (expecting a pointer) but perhaps the same name.
+ "The most important GRIN ..." - a bit confusing to first start
  writing about suspended computations and then writing that they
  don't exist.
+ p4: "Function nodes need ...": you apply a function to an argument,
  not the other way around.
+ downFrom example: I'd like line nunbers, if possible
+ I don't understand this part:
  "x35 →
  update x7 x34 ; λ () →
  unit x35":
  why is x7 updated with the same value (x34) as was just fetched from x7?
+ "inlining require" := "inlining requires"
+ somewhere early: is the comment about not supporting circular
  structures an actual limitation for you? It is unclear if it is
  actually possible to create circular structures from your source
  language.

-- NYA

+ "excessive amount" - please be a bit more specific - is it roughly
  linear, quadratic, etc. in the size of the input, etc?
+ "We have only implemented" := "Of these, we have only implemented"
+ "or by transfer" := "or by transferring"
+ "require no" := "requires no"
+ p6: "that fetch bind" := "that fetch binds"
+ (I don't understand the explanation about extending the borrowed env.)
+ "There is no point to ref. count values in reg.s ...": It is not
  clear from the text why the 2nd half of the sentence follows. Is it
  implicitly known that the "regular values stored in reg.s" are
  always pointers? Please explain.
+ "...is not yet implemented" := "...is not yet implemented in this
  project" or something similar (now it sounds like Reinking did not
  implement it yet).

